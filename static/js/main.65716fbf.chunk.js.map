{"version":3,"sources":["const.js","utils/utils.js","apis/htmlacademy.js","model/tasks.js","components/Menu.js","components/Filters.js","components/LoadMoreButton.js","components/Task.js","utils/blank.js","components/EditTask.js","components/Sort.js","components/Board.js","components/Status.js","components/Statistics.js","components/App.js","index.js"],"names":["FILTERS","ALL","OVERDUE","TODAY","FAVORITES","REPEATING","ARCHIVE","SORTS","DEFAULT","DATE_UP","DATE_DOWN","COLORS","MODES","ERRORS","isRepeating","repeatingDays","Object","values","isDeadlined","date","isExpired","now","Date","isToday","tomorrow","getFullYear","getMonth","getDate","today","sortByDateDown","taskA","taskB","dateA","due_date","dateB","sortByDateUp","getRGBAColors","colors","RGBAColors","Map","map","color","get","toLowerCase","axios","create","baseURL","headers","Authorization","TaskModel","receiveTasksData","a","htmlacademy","then","data","_tasks","error","console","updateTask","task","method","url","id","addTask","deleteTask","this","filter","sortType","filterFunction","item","is_archived","is_favorite","repeating_days","sortFunction","tasks","slice","sort","Menu","tasksRef","createRef","handleAddNewTaskClick","evt","current","checked","props","onAddNewTaskClick","Fragment","className","type","name","onClick","htmlFor","onTasksClick","defaultChecked","ref","onStatisticsClick","Component","Filters","tasksAmount","taskModel","getTasks","length","currentFilter","onFilterClick","disabled","showStats","renderFilters","LoadMoreButton","onLoadMoreButtonClick","Task","onArchiveButtonClick","onFavoriteButtonClick","onEditButtonClick","useState","favoriting","setFavoriting","archiving","setArchiving","taskRef","useRef","description","isArchived","isFavorite","dueDate","disabledButtonClass","handleFavoriteButtonClick","preventDefault","catch","handleArchiveButtonClick","renderedDetails","moment","format","expired","width","height","dangerouslySetInnerHTML","__html","noRepeatingDays","mo","tu","we","th","fr","sa","su","blankTask","EditTask","flatpickr","dateInputRef","React","handleEscClick","key","onEditCancel","handleDescriptionChange","assign","state","target","value","setState","handleSaveButtonClick","showRepeat","showDate","isSaving","onSaveButtonClick","handleDeleteButtonClick","isDeleting","onDeleteButtonClick","handleDayClick","day","handleShowRepeatClick","handleShowDateClick","handleDateChange","handleColorPick","JSON","parse","stringify","document","body","addEventListener","setFlatpickr","removeEventListener","destroy","defaultDate","enableTime","dateFormat","altInput","altFormat","onChange","renderedDays","entries","active","defaultValue","activeColor","placeholder","renderDate","renderRepeatingDays","renderColors","Sort","onSortClick","renderedSort","sortTypeTitle","split","toUpperCase","join","href","data-sort-type","Board","activeTask","onTaskChange","handleEditButtonClick","onModeChange","mode","handleEditCancel","taskCopy","currentTaskAmount","renderAddTask","renderLoadMoreButton","renderBoard","Status","renderedStatus","Statistics","circleRef","filteredTasks","setFilteredTasks","useEffect","selector","dateFrom","dateTo","isBetween","flatpicker","forEach","set","Array","from","keys","getColorsInfo","colorLabels","colorsAmount","circleCtx","circleChart","Chart","labels","datasets","label","backgroundColor","borderColor","borderWidth","App","handleLoadMoreButtonClick","Math","min","handleSortClick","handleFilterClick","handleTaskChange","oldTask","newTask","handleStatisticsClick","handleTasksClick","handleModeChange","liveUpdate","setInterval","renderContent","ReactDOM","render","querySelector"],"mappings":"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","file":"static/js/main.65716fbf.chunk.js","sourcesContent":["const FILTERS = {\r\n  ALL: 'all',\r\n  OVERDUE: 'overdue',\r\n  TODAY: 'today',\r\n  FAVORITES: 'favorites',\r\n  REPEATING: 'repeating',\r\n  ARCHIVE: 'archive',\r\n};\r\n\r\nconst SORTS = {\r\n  DEFAULT: 'default',\r\n  DATE_UP: 'date-up',\r\n  DATE_DOWN: 'date-down',\r\n};\r\n\r\nconst COLORS = ['pink', 'yellow', 'green', 'black', 'blue'];\r\n\r\nconst MODES = {\r\n  SHOW: 'show',\r\n  EDIT: 'edit',\r\n  ADD: 'add',\r\n};\r\n\r\nconst ERRORS = {\r\n  NETWORK: 'network',\r\n};\r\n\r\nexport { FILTERS, SORTS, COLORS, MODES, ERRORS };\r\n","function isRepeating(repeatingDays) {\r\n  for (const value of Object.values(repeatingDays)) {\r\n    if (value) {\r\n      return true;\r\n    }\r\n  }\r\n\r\n  return false;\r\n}\r\n\r\nfunction isBetween(date, dateFrom, dateTo) {\r\n  return date > dateFrom && date < dateTo;\r\n}\r\n\r\nfunction isDeadlined(date) {\r\n  return date !== null;\r\n}\r\n\r\nfunction isExpired(date) {\r\n  if (!date) {\r\n    return false;\r\n  }\r\n\r\n  const now = new Date();\r\n  const dueDate = new Date(date);\r\n\r\n  return dueDate < now;\r\n}\r\n\r\nfunction isToday(date) {\r\n  if (date === null) {\r\n    return false;\r\n  }\r\n\r\n  date = new Date(date);\r\n\r\n  const now = new Date();\r\n  const tomorrow = new Date(\r\n    now.getFullYear(),\r\n    now.getMonth(),\r\n    now.getDate() + 1\r\n  );\r\n  const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());\r\n\r\n  return date < tomorrow && date >= today;\r\n}\r\n\r\nfunction sortByDateDown(taskA, taskB) {\r\n  let dateA = taskA.due_date;\r\n  let dateB = taskB.due_date;\r\n\r\n  if (!dateA && !dateB) {\r\n    return 0;\r\n  }\r\n\r\n  if (dateA === null) {\r\n    return 1;\r\n  }\r\n\r\n  if (dateB === null) {\r\n    return -1;\r\n  }\r\n\r\n  return new Date(dateB) - new Date(dateA);\r\n}\r\n\r\nfunction sortByDateUp(taskA, taskB) {\r\n  let dateA = taskA.due_date;\r\n  let dateB = taskB.due_date;\r\n\r\n  if (!dateA && !dateB) {\r\n    return 0;\r\n  }\r\n\r\n  if (dateA === null) {\r\n    return 1;\r\n  }\r\n\r\n  if (dateB === null) {\r\n    return -1;\r\n  }\r\n\r\n  return new Date(dateA) - new Date(dateB);\r\n}\r\n\r\nfunction getRGBAColors(colors) {\r\n  const RGBAColors = new Map([\r\n    ['blue', 'rgba(0, 0, 255, 0.5)'],\r\n    ['green', 'rgba(0, 255, 0, 0.5)'],\r\n    ['pink', 'rgba(238, 0, 255, 0.5)'],\r\n    ['yellow', 'rgba(255, 255, 0, 0.5)'],\r\n    ['black', 'rgba(0, 0, 0, 0.5)'],\r\n  ]);\r\n\r\n  return colors.map((color) => {\r\n    return RGBAColors.get(color.toLowerCase());\r\n  });\r\n}\r\n\r\nexport {\r\n  isRepeating,\r\n  isDeadlined,\r\n  isToday,\r\n  isBetween,\r\n  isExpired,\r\n  sortByDateDown,\r\n  sortByDateUp,\r\n  getRGBAColors,\r\n};\r\n","import axios from 'axios';\r\n\r\nconst key = 'witod1varo_genius';\r\n\r\nexport default axios.create({\r\n  baseURL: 'https://11.ecmascript.pages.academy/task-manager',\r\n  headers: {\r\n    Authorization: `Basic ${key}`,\r\n  },\r\n});\r\n","import { FILTERS, SORTS } from '../const';\r\nimport {\r\n  sortByDateDown,\r\n  sortByDateUp,\r\n  isToday,\r\n  isRepeating,\r\n  isExpired,\r\n} from '../utils/utils';\r\nimport htmlacademy from '../apis/htmlacademy';\r\n\r\nclass TaskModel {\r\n  constructor() {\r\n    this._tasks = [];\r\n  }\r\n\r\n  receiveTasksData = async () => {\r\n    return await htmlacademy.get('/tasks').then(\r\n      ({ data }) => {\r\n        this._tasks = data;\r\n      },\r\n      (error) => {\r\n        console.error('Network error happend when app tried to receive tasks.');\r\n        this._tasks = null;\r\n      }\r\n    );\r\n  };\r\n\r\n  getTasks({ filter, sortType } = {}) {\r\n    if (!this._tasks) {\r\n      return null;\r\n    }\r\n\r\n    if (!filter) {\r\n      filter = FILTERS.ALL;\r\n    }\r\n\r\n    let filterFunction = (item) => {\r\n      return false;\r\n    };\r\n\r\n    switch (filter) {\r\n      case FILTERS.ALL:\r\n        filterFunction = (item) => {\r\n          return !item.is_archived;\r\n        };\r\n        break;\r\n      case FILTERS.OVERDUE:\r\n        filterFunction = (item) => {\r\n          return !item.is_archived && isExpired(item.due_date);\r\n        };\r\n        break;\r\n      case FILTERS.TODAY:\r\n        filterFunction = (item) => {\r\n          return !item.is_archived && isToday(item.due_date);\r\n        };\r\n        break;\r\n      case FILTERS.FAVORITES:\r\n        filterFunction = (item) => {\r\n          return !item.is_archived && item.is_favorite;\r\n        };\r\n        break;\r\n      case FILTERS.REPEATING:\r\n        filterFunction = (item) => {\r\n          return !item.is_archived && isRepeating(item.repeating_days);\r\n        };\r\n        break;\r\n      case FILTERS.ARCHIVE:\r\n        filterFunction = (item) => {\r\n          return item.is_archived;\r\n        };\r\n        break;\r\n      default:\r\n    }\r\n\r\n    if (!sortType) {\r\n      sortType = SORTS.DEFAULT;\r\n    }\r\n\r\n    let sortFunction = null;\r\n\r\n    switch (sortType) {\r\n      case SORTS.DATE_DOWN:\r\n        sortFunction = sortByDateDown;\r\n        break;\r\n      case SORTS.DATE_UP:\r\n        sortFunction = sortByDateUp;\r\n        break;\r\n      case SORTS.DEFAULT:\r\n        sortFunction = () => {\r\n          return 0;\r\n        };\r\n        break;\r\n      default:\r\n    }\r\n\r\n    const tasks = this._tasks.slice().filter(filterFunction).sort(sortFunction);\r\n    return tasks;\r\n  }\r\n\r\n  updateTask = async (task) => {\r\n    return await htmlacademy({\r\n      method: 'PUT',\r\n      url: `/tasks/${task.id}`,\r\n      data: task,\r\n    });\r\n  };\r\n\r\n  addTask = async (task) => {\r\n    return await htmlacademy({\r\n      method: 'POST',\r\n      url: '/tasks',\r\n      data: task,\r\n    });\r\n  };\r\n\r\n  deleteTask = async (task) => {\r\n    return await htmlacademy({\r\n      method: 'DELETE',\r\n      url: `/tasks/${task.id}`,\r\n    });\r\n  };\r\n}\r\n\r\nexport default TaskModel;\r\n","import React, { Component, createRef } from 'react';\r\n\r\nclass Menu extends Component {\r\n  tasksRef = createRef();\r\n\r\n  handleAddNewTaskClick = (evt) => {\r\n    this.tasksRef.current.checked = 'true';\r\n    this.props.onAddNewTaskClick(evt);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <section className=\"control__btn-wrap\">\r\n          <input\r\n            type=\"radio\"\r\n            name=\"control\"\r\n            id=\"control__new-task\"\r\n            className=\"control__input visually-hidden\"\r\n            onClick={this.handleAddNewTaskClick}\r\n          />\r\n          <label\r\n            htmlFor=\"control__new-task\"\r\n            className=\"control__label control__label--new-task\"\r\n          >\r\n            + ADD NEW TASK\r\n          </label>\r\n          <input\r\n            type=\"radio\"\r\n            name=\"control\"\r\n            id=\"control__task\"\r\n            className=\"control__input visually-hidden\"\r\n            onClick={this.props.onTasksClick}\r\n            defaultChecked\r\n            ref={this.tasksRef}\r\n          />\r\n          <label htmlFor=\"control__task\" className=\"control__label\">\r\n            TASKS\r\n          </label>\r\n          <input\r\n            type=\"radio\"\r\n            name=\"control\"\r\n            id=\"control__statistic\"\r\n            className=\"control__input visually-hidden\"\r\n            onClick={this.props.onStatisticsClick}\r\n          />\r\n          <label htmlFor=\"control__statistic\" className=\"control__label\">\r\n            STATISTICS\r\n          </label>\r\n        </section>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Menu;\r\n","import React, { Component } from 'react';\r\nimport { FILTERS } from '../const';\r\n\r\nclass Filters extends Component {\r\n  renderFilters() {\r\n    return Object.values(FILTERS).map((filter) => {\r\n      let tasksAmount = null;\r\n      if (this.props.taskModel && this.props.taskModel.getTasks()) {\r\n        tasksAmount = this.props.taskModel.getTasks({ filter }).length;\r\n      } else {\r\n        tasksAmount = 0;\r\n      }\r\n\r\n      const checked = this.props.currentFilter === filter;\r\n\r\n      return (\r\n        <React.Fragment key={`FILTER ${filter}`}>\r\n          <input\r\n            type=\"radio\"\r\n            id={`filter__${filter}`}\r\n            className=\"filter__input visually-hidden\"\r\n            name=\"filter\"\r\n            defaultChecked={checked}\r\n            onClick={() => this.props.onFilterClick(filter)}\r\n            disabled={tasksAmount === 0 || this.props.showStats}\r\n          />\r\n          <label htmlFor={`filter__${filter}`} className=\"filter__label\">\r\n            {filter} <span className=\"filter__all-count\">{tasksAmount}</span>\r\n          </label>\r\n        </React.Fragment>\r\n      );\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <section className=\"main__filter filter container\">\r\n        {this.renderFilters()}\r\n      </section>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Filters;\r\n","import React from 'react';\r\n\r\nfunction LoadMoreButton({ onLoadMoreButtonClick }) {\r\n  return (\r\n    <button className=\"load-more\" type=\"button\" onClick={onLoadMoreButtonClick}>\r\n      load more\r\n    </button>\r\n  );\r\n}\r\n\r\nexport default LoadMoreButton;\r\n","import React, { useState, useRef } from 'react';\r\nimport { isRepeating, isDeadlined, isExpired } from '../utils/utils.js';\r\nimport moment from 'moment';\r\n\r\nfunction Task({\r\n  task,\r\n  onArchiveButtonClick,\r\n  onFavoriteButtonClick,\r\n  onEditButtonClick,\r\n}) {\r\n  const [favoriting, setFavoriting] = useState(false);\r\n  const [archiving, setArchiving] = useState(false);\r\n\r\n  const taskRef = useRef();\r\n\r\n  const {\r\n    color,\r\n    description,\r\n    is_archived: isArchived,\r\n    is_favorite: isFavorite,\r\n    repeating_days: repeatingDays,\r\n    due_date: dueDate,\r\n  } = task;\r\n  const disabledButtonClass = 'card__btn--disabled';\r\n\r\n  const handleFavoriteButtonClick = async (evt) => {\r\n    evt.preventDefault();\r\n\r\n    setFavoriting(true);\r\n    await onFavoriteButtonClick(task).catch(() => {\r\n      console.error('Network error happened.');\r\n    });\r\n\r\n    if (taskRef.current) {\r\n      setFavoriting(false);\r\n    }\r\n  };\r\n\r\n  const handleArchiveButtonClick = async (evt) => {\r\n    evt.preventDefault();\r\n\r\n    setArchiving(true);\r\n    await onArchiveButtonClick(task).catch((error) => {\r\n      console.error('Network error happened.');\r\n    });\r\n\r\n    if (taskRef.current) {\r\n      setArchiving(false);\r\n    }\r\n  };\r\n\r\n  const renderedDetails = isDeadlined(dueDate) ? (\r\n    <div className=\"card__details\">\r\n      <div className=\"card__dates\">\r\n        <div className=\"card__date-deadline\">\r\n          <p className=\"card__input-deadline-wrap\">\r\n            <span className=\"card__date\">\r\n              {moment(dueDate).format('DD MMMM')}\r\n            </span>\r\n            <span className=\"card__time\">\r\n              {moment(dueDate).format('hh:mm A')}\r\n            </span>\r\n          </p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  ) : null;\r\n\r\n  const expired = isDeadlined(dueDate) ? isExpired(dueDate) : false;\r\n\r\n  return (\r\n    <article\r\n      className={`card card--${color} ${\r\n        isRepeating(repeatingDays) ? 'card--repeat' : ''\r\n      } ${expired ? 'card--red card--deadline' : ''}`}\r\n      ref={taskRef}\r\n    >\r\n      <div className=\"card__form\">\r\n        <div className=\"card__inner\">\r\n          <div className=\"card__control\">\r\n            <button\r\n              type=\"button\"\r\n              className=\"card__btn card__btn--edit\"\r\n              onClick={() => onEditButtonClick(task)}\r\n            >\r\n              edit\r\n            </button>\r\n            <button\r\n              type=\"button\"\r\n              className={`card__btn card__btn--archive ${\r\n                (isArchived && !archiving) || isArchived\r\n                  ? disabledButtonClass\r\n                  : ''\r\n              }`}\r\n              onClick={handleArchiveButtonClick}\r\n            >\r\n              {archiving ? 'archiving..' : 'archive'}\r\n            </button>\r\n            <button\r\n              type=\"button\"\r\n              className={`card__btn card__btn--favorites ${\r\n                (isFavorite && !favoriting) || isFavorite\r\n                  ? disabledButtonClass\r\n                  : ''\r\n              }`}\r\n              onClick={handleFavoriteButtonClick}\r\n            >\r\n              {favoriting ? 'favoriting..' : 'favorites'}\r\n            </button>\r\n          </div>\r\n\r\n          <div className=\"card__color-bar\">\r\n            <svg\r\n              className=\"card__color-bar-wave\"\r\n              width=\"100%\"\r\n              height=\"10\"\r\n              dangerouslySetInnerHTML={{\r\n                __html: '<use xlink:href=\"#wave\"></use>',\r\n              }}\r\n            ></svg>\r\n          </div>\r\n\r\n          <div className=\"card__textarea-wrap\">\r\n            <p className=\"card__text\">{description}</p>\r\n          </div>\r\n          <div className=\"card__settings\">{renderedDetails}</div>\r\n        </div>\r\n      </div>\r\n    </article>\r\n  );\r\n}\r\n\r\nexport default Task;\r\n","const noRepeatingDays = {\r\n  mo: false,\r\n  tu: false,\r\n  we: false,\r\n  th: false,\r\n  fr: false,\r\n  sa: false,\r\n  su: false,\r\n};\r\nconst blankTask = {\r\n  color: 'black',\r\n  description: '',\r\n  due_date: null,\r\n  is_archived: false,\r\n  is_favorite: false,\r\n  repeating_days: noRepeatingDays,\r\n};\r\n\r\nfunction makeid(length) {\r\n  var result = '';\r\n  var characters =\r\n    'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r\n  var charactersLength = characters.length;\r\n  for (var i = 0; i < length; i++) {\r\n    result += characters.charAt(Math.floor(Math.random() * charactersLength));\r\n  }\r\n  return result;\r\n}\r\n\r\nexport { blankTask, noRepeatingDays, makeid };\r\n","import '../../node_modules/flatpickr/dist/flatpickr.min.css';\r\nimport flatpickr from 'flatpickr';\r\nimport React, { Component } from 'react';\r\nimport { isDeadlined, isRepeating } from '../utils/utils';\r\nimport { noRepeatingDays } from '../utils/blank';\r\nimport { COLORS } from '../const';\r\n\r\nconst MAX_LENGTH = 140;\r\nconst MIN_LENGTH = 1;\r\n\r\nclass EditTask extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    const task = JSON.parse(JSON.stringify(this.props.task));\r\n\r\n    this.state = {\r\n      task,\r\n      showRepeat: isRepeating(task.repeating_days),\r\n      showDate: isDeadlined(task.due_date),\r\n      isDeleting: false,\r\n      isSaving: false,\r\n    };\r\n  }\r\n\r\n  flatpickr = null;\r\n  dateInputRef = React.createRef();\r\n\r\n  componentDidMount() {\r\n    document.body.addEventListener('keydown', this.handleEscClick);\r\n    if (this.dateInputRef.current) {\r\n      this.setFlatpickr();\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    document.body.removeEventListener('keydown', this.handleEscClick);\r\n    if (this.flatpickr) {\r\n      this.flatpickr.destroy();\r\n    }\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    if (this.dateInputRef.current) {\r\n      this.setFlatpickr();\r\n    }\r\n  }\r\n\r\n  setFlatpickr() {\r\n    if (this.flatpickr) {\r\n      this.flatpickr.destroy();\r\n    }\r\n\r\n    this.flatpickr = flatpickr(this.dateInputRef.current, {\r\n      defaultDate: this.state.task.due_date || new Date(),\r\n      enableTime: true,\r\n      dateFormat: 'Y-m-d H:i',\r\n      altInput: true,\r\n      altFormat: 'j F H:i',\r\n      onChange: this.handleDateChange,\r\n    });\r\n  }\r\n\r\n  handleEscClick = (evt) => {\r\n    if (evt.key === 'Escape') {\r\n      this.props.onEditCancel();\r\n    }\r\n  };\r\n\r\n  handleDescriptionChange = (evt) => {\r\n    const task = Object.assign({}, this.state.task, {\r\n      description: evt.target.value,\r\n    });\r\n    this.setState({ task });\r\n  };\r\n\r\n  handleSaveButtonClick = (evt) => {\r\n    evt.preventDefault();\r\n    let task = Object.assign({}, this.state.task);\r\n    if (!this.state.showRepeat) {\r\n      const repeatingDays = Object.assign({}, noRepeatingDays);\r\n      task = Object.assign({}, task, { repeating_days: repeatingDays });\r\n    }\r\n\r\n    let dueDate = this.state.showDate\r\n      ? new Date(this.state.task.due_date || new Date())\r\n      : null;\r\n\r\n    task = Object.assign({}, task, { due_date: dueDate });\r\n    this.setState({ isSaving: true });\r\n    this.props.onSaveButtonClick(task);\r\n  };\r\n\r\n  handleDeleteButtonClick = (evt) => {\r\n    evt.preventDefault();\r\n    this.setState({ isDeleting: true });\r\n    this.props.onDeleteButtonClick(this.state.task);\r\n  };\r\n\r\n  handleDayClick = (day) => {\r\n    const repeating_days = Object.assign(\r\n      {},\r\n      this.state.task.repeating_days,\r\n      day\r\n    );\r\n    const task = Object.assign({}, this.state.task, { repeating_days });\r\n    this.setState({ task });\r\n  };\r\n\r\n  handleShowRepeatClick = () => {\r\n    this.setState({ showRepeat: !this.state.showRepeat });\r\n  };\r\n\r\n  handleShowDateClick = () => {\r\n    const showDate = !this.state.showDate;\r\n    let task = this.state.task;\r\n\r\n    if (!showDate) {\r\n      task = Object.assign({}, this.state.task, { due_date: null });\r\n    }\r\n\r\n    this.setState({ showDate, task });\r\n  };\r\n\r\n  handleDateChange = ([date]) => {\r\n    const task = Object.assign({}, this.state.task, {\r\n      due_date: date,\r\n    });\r\n    this.setState({ task });\r\n  };\r\n\r\n  handleColorPick = (color) => {\r\n    const task = Object.assign({}, this.state.task, { color });\r\n    this.setState({ task });\r\n  };\r\n\r\n  renderRepeatingDays(repeatingDays) {\r\n    if (!this.state.showRepeat) {\r\n      return null;\r\n    }\r\n\r\n    const renderedDays = Object.entries(repeatingDays).map(([day, active]) => {\r\n      return (\r\n        <React.Fragment key={`REPEATING_DAY ${day}`}>\r\n          <input\r\n            className=\"visually-hidden card__repeat-day-input\"\r\n            type=\"checkbox\"\r\n            id={`repeat-${day}-4`}\r\n            name=\"repeat\"\r\n            defaultValue={day}\r\n            defaultChecked={active}\r\n            onClick={() =>\r\n              this.handleDayClick({\r\n                [day]: !active,\r\n              })\r\n            }\r\n          />\r\n          <label className=\"card__repeat-day\" htmlFor={`repeat-${day}-4`}>\r\n            {day}\r\n          </label>\r\n        </React.Fragment>\r\n      );\r\n    });\r\n\r\n    return (\r\n      <fieldset className=\"card__repeat-days\" key={'RENDERED_DAYS'}>\r\n        <div className=\"card__repeat-days-inner\">{renderedDays}</div>\r\n      </fieldset>\r\n    );\r\n  }\r\n\r\n  renderDate(dueDate) {\r\n    if (!this.state.showDate) {\r\n      return null;\r\n    }\r\n\r\n    if (!dueDate) {\r\n      dueDate = new Date();\r\n    }\r\n\r\n    return (\r\n      <fieldset className=\"card__date-deadline\">\r\n        <label className=\"card__input-deadline-wrap\">\r\n          <input\r\n            className=\"card__date\"\r\n            type=\"text\"\r\n            name=\"date\"\r\n            defaultValue={new Date(dueDate)}\r\n            ref={this.dateInputRef}\r\n          />\r\n        </label>\r\n      </fieldset>\r\n    );\r\n  }\r\n\r\n  renderColors(activeColor) {\r\n    return COLORS.map((color) => {\r\n      return (\r\n        <React.Fragment key={`COLOR ${color}`}>\r\n          <input\r\n            type=\"radio\"\r\n            id={`color-${color}-4`}\r\n            className={`card__color-input card__color-input--${color} visually-hidden`}\r\n            name=\"color\"\r\n            defaultValue={color}\r\n            defaultChecked={activeColor === color}\r\n            onClick={() => this.handleColorPick(color)}\r\n          />\r\n          <label\r\n            htmlFor={`color-${color}-4`}\r\n            className={`card__color card__color--${color}`}\r\n          >\r\n            {color}\r\n          </label>\r\n        </React.Fragment>\r\n      );\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      due_date: dueDate,\r\n      description,\r\n      color,\r\n      repeating_days: repeatingDays,\r\n    } = this.state.task;\r\n    return (\r\n      <article\r\n        className={`card card--edit card--${color} ${\r\n          this.state.showRepeat ? 'card--repeat' : ''\r\n        }`}\r\n      >\r\n        <form className=\"card__form\" method=\"get\">\r\n          <div className=\"card__inner\">\r\n            <div className=\"card__color-bar\">\r\n              <svg\r\n                className=\"card__color-bar-wave\"\r\n                width=\"100%\"\r\n                height=\"10\"\r\n                dangerouslySetInnerHTML={{\r\n                  __html: '<use xlink:href=\"#wave\"></use>',\r\n                }}\r\n              ></svg>\r\n            </div>\r\n\r\n            <div className=\"card__textarea-wrap\">\r\n              <label>\r\n                <textarea\r\n                  className=\"card__text\"\r\n                  placeholder=\"Start typing your text here...\"\r\n                  name=\"text\"\r\n                  value={description}\r\n                  onChange={this.handleDescriptionChange}\r\n                ></textarea>\r\n              </label>\r\n            </div>\r\n\r\n            <div className=\"card__settings\">\r\n              <div className=\"card__details\">\r\n                <div className=\"card__dates\">\r\n                  <button\r\n                    className=\"card__date-deadline-toggle\"\r\n                    type=\"button\"\r\n                    onClick={this.handleShowDateClick}\r\n                  >\r\n                    date:\r\n                    <span className=\"card__date-status\">\r\n                      {this.state.showDate ? 'yes' : 'no'}\r\n                    </span>\r\n                  </button>\r\n\r\n                  {this.renderDate(dueDate)}\r\n\r\n                  <button\r\n                    className=\"card__repeat-toggle\"\r\n                    type=\"button\"\r\n                    onClick={this.handleShowRepeatClick}\r\n                  >\r\n                    repeat:\r\n                    <span className=\"card__repeat-status\">\r\n                      {this.state.showRepeat ? 'yes' : 'no'}\r\n                    </span>\r\n                  </button>\r\n\r\n                  {this.renderRepeatingDays(repeatingDays)}\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"card__colors-inner\">\r\n                <h3 className=\"card__colors-title\">Color</h3>\r\n                <div className=\"card__colors-wrap\">\r\n                  {this.renderColors(color)}\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"card__status-btns\">\r\n              <button\r\n                className=\"card__save\"\r\n                type=\"submit\"\r\n                onClick={this.handleSaveButtonClick}\r\n                disabled={\r\n                  (this.state.showRepeat && this.state.showDate) ||\r\n                  description.length < MIN_LENGTH ||\r\n                  description.length > MAX_LENGTH ||\r\n                  this.state.isSaving\r\n                }\r\n              >\r\n                {this.state.isSaving ? 'Saving...' : 'Save'}\r\n              </button>\r\n              <button\r\n                className=\"card__delete\"\r\n                type=\"button\"\r\n                onClick={this.handleDeleteButtonClick}\r\n                disabled={this.state.isDeleting}\r\n              >\r\n                {this.state.isDeleting ? 'Deleting...' : 'Delete'}\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </form>\r\n      </article>\r\n    );\r\n  }\r\n}\r\n\r\nexport default EditTask;\r\n","import React from 'react';\r\nimport { SORTS } from '../const';\r\n\r\nfunction Sort({ onSortClick }) {\r\n  const renderedSort = Object.values(SORTS).map((sortType) => {\r\n    let sortTypeTitle = sortType.split('-');\r\n    sortTypeTitle[0] = sortTypeTitle[0].toUpperCase();\r\n    sortTypeTitle = sortTypeTitle.join(' ');\r\n\r\n    return (\r\n      <a\r\n        key={`SORT ${sortType}`}\r\n        href=\"#sort\"\r\n        className=\"board__filter\"\r\n        data-sort-type=\"sortType\"\r\n        onClick={() => onSortClick(sortType)}\r\n      >\r\n        SORT BY {sortTypeTitle}\r\n      </a>\r\n    );\r\n  });\r\n\r\n  return <div className=\"board__filter-list\">{renderedSort}</div>;\r\n}\r\n\r\nexport default Sort;\r\n","import React, { Component } from 'react';\r\nimport LoadMoreButton from './LoadMoreButton';\r\nimport Task from './Task';\r\nimport EditTask from './EditTask';\r\nimport Sort from './Sort';\r\nimport { MODES } from '../const.js';\r\nimport { blankTask } from '../utils/blank';\r\n\r\nclass Board extends Component {\r\n  state = {\r\n    activeTask: null,\r\n  };\r\n\r\n  handleArchiveButtonClick = async (task) => {\r\n    task = Object.assign({}, task, { is_archived: !task.is_archived });\r\n    return await this.props.onTaskChange(task);\r\n  };\r\n\r\n  handleFavoriteButtonClick = async (task) => {\r\n    task = Object.assign({}, task, { is_favorite: !task.is_favorite });\r\n    return await this.props.onTaskChange(task);\r\n  };\r\n\r\n  handleEditButtonClick = (task) => {\r\n    this.props.onModeChange(MODES.EDIT);\r\n    this.setState({ activeTask: task });\r\n  };\r\n\r\n  handleSaveButtonClick = async (task) => {\r\n    if (this.props.mode === MODES.EDIT) {\r\n      await this.props.onTaskChange(task);\r\n    } else if (this.props.mode === MODES.ADD) {\r\n      await this.props.onTaskChange(null, task);\r\n    }\r\n    this.props.onModeChange(MODES.SHOW);\r\n    this.setState({ activeTask: null });\r\n  };\r\n\r\n  handleDeleteButtonClick = async (task) => {\r\n    if (this.props.mode === MODES.EDIT) {\r\n      await this.props.onTaskChange(task, null);\r\n    }\r\n\r\n    this.props.onModeChange(MODES.SHOW);\r\n    this.setState({ activeTask: null });\r\n  };\r\n\r\n  handleEditCancel = () => {\r\n    this.props.onModeChange(MODES.SHOW);\r\n    this.setState({ activeTask: null });\r\n  };\r\n\r\n  renderBoard() {\r\n    if (\r\n      (this.props.tasks && this.props.tasks.length !== 0) ||\r\n      this.props.mode === MODES.ADD\r\n    ) {\r\n      const tasks = this.props.tasks\r\n        .map((task) => {\r\n          const taskCopy = JSON.parse(JSON.stringify(task));\r\n\r\n          if (\r\n            this.props.mode === MODES.EDIT &&\r\n            this.state.activeTask &&\r\n            taskCopy.id === this.state.activeTask.id\r\n          ) {\r\n            return (\r\n              <EditTask\r\n                key={`EDIT_TASK ${task.id}`}\r\n                task={taskCopy}\r\n                onSaveButtonClick={this.handleSaveButtonClick}\r\n                onDeleteButtonClick={this.handleDeleteButtonClick}\r\n                onEditCancel={this.handleEditCancel}\r\n              />\r\n            );\r\n          }\r\n\r\n          return (\r\n            <Task\r\n              key={`TASK ${task.id}`}\r\n              task={taskCopy}\r\n              onArchiveButtonClick={this.handleArchiveButtonClick}\r\n              onFavoriteButtonClick={this.handleFavoriteButtonClick}\r\n              onEditButtonClick={this.handleEditButtonClick}\r\n            />\r\n          );\r\n        })\r\n        .slice(0, this.props.currentTaskAmount);\r\n\r\n      return (\r\n        <React.Fragment>\r\n          <Sort onSortClick={this.props.onSortClick} />\r\n\r\n          <div className=\"board__tasks\">\r\n            {this.renderAddTask()}\r\n            {tasks}\r\n          </div>\r\n          {this.renderLoadMoreButton()}\r\n        </React.Fragment>\r\n      );\r\n    }\r\n\r\n    if (this.props.tasks && this.props.tasks.length === 0) {\r\n      return (\r\n        <p className=\"board__no-tasks\">\r\n          Click «ADD NEW TASK» in menu to create your first task\r\n        </p>\r\n      );\r\n    }\r\n  }\r\n\r\n  renderAddTask() {\r\n    if (this.props.mode === MODES.ADD) {\r\n      const taskCopy = JSON.parse(JSON.stringify(blankTask));\r\n\r\n      return (\r\n        <EditTask\r\n          key={`ADD_TASK`}\r\n          task={taskCopy}\r\n          onSaveButtonClick={this.handleSaveButtonClick}\r\n          onDeleteButtonClick={this.handleDeleteButtonClick}\r\n          onEditCancel={this.handleEditCancel}\r\n        />\r\n      );\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  renderLoadMoreButton() {\r\n    if (this.props.currentTaskAmount === this.props.tasks.length) {\r\n      return null;\r\n    }\r\n\r\n    return (\r\n      <LoadMoreButton\r\n        onLoadMoreButtonClick={this.props.onLoadMoreButtonClick}\r\n      />\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return <section className=\"board container\">{this.renderBoard()}</section>;\r\n  }\r\n}\r\n\r\nexport default Board;\r\n","import React from 'react';\r\nimport { ERRORS } from '../const';\r\n\r\nfunction Status({ error }) {\r\n  let renderedStatus = null;\r\n  switch (error) {\r\n    case ERRORS.NETWORK:\r\n      renderedStatus = 'Your network connection is lost. Try again later.';\r\n      break;\r\n    default:\r\n      renderedStatus = 'Loading...';\r\n      break;\r\n  }\r\n\r\n  return <p className=\"board__no-tasks\">{renderedStatus}</p>;\r\n}\r\n\r\nexport default Status;\r\n","import React, { useEffect, useRef, useState } from 'react';\r\nimport Chart from 'chart.js';\r\nimport flatpickr from 'flatpickr';\r\nimport { isBetween, getRGBAColors } from '../utils/utils';\r\n\r\nfunction Statistics({ tasks }) {\r\n  const circleRef = useRef();\r\n  const [filteredTasks, setFilteredTasks] = useState(tasks);\r\n\r\n  const getColorsInfo = (tasks) => {\r\n    const colors = new Map();\r\n\r\n    tasks.forEach((task) => {\r\n      let color = task.color;\r\n      color = color[0].toUpperCase() + color.slice(1);\r\n      colors.set(color, colors.get(color) + 1 || 1);\r\n    });\r\n\r\n    return [Array.from(colors.keys()), Array.from(colors.values())];\r\n  };\r\n\r\n  useEffect(() => {\r\n    const handleDateChange = ([dateFrom, dateTo]) => {\r\n      setFilteredTasks(\r\n        tasks.filter((task) => {\r\n          return isBetween(new Date(task.due_date), dateFrom, dateTo);\r\n        })\r\n      );\r\n    };\r\n\r\n    const setFlatpickr = (selector) => {\r\n      return flatpickr(selector, {\r\n        mode: 'range',\r\n        altInput: true,\r\n        altFormat: 'F j',\r\n        onChange: handleDateChange,\r\n      });\r\n    };\r\n\r\n    const flatpicker = setFlatpickr('.statistic__period-input');\r\n\r\n    return () => {\r\n      flatpicker.destroy();\r\n    };\r\n  }, [tasks]);\r\n\r\n  useEffect(() => {\r\n    const [colorLabels, colorsAmount] = getColorsInfo(filteredTasks);\r\n\r\n    const circleCtx = circleRef.current;\r\n    const circleChart = new Chart(circleCtx, {\r\n      type: 'doughnut',\r\n      data: {\r\n        labels: colorLabels,\r\n        datasets: [\r\n          {\r\n            label: '# of tasks',\r\n            data: colorsAmount,\r\n            backgroundColor: getRGBAColors(colorLabels),\r\n            borderColor: colorLabels,\r\n            borderWidth: 1,\r\n          },\r\n        ],\r\n      },\r\n    });\r\n\r\n    return () => {\r\n      circleChart.destroy();\r\n    };\r\n  }, [filteredTasks]);\r\n\r\n  return (\r\n    <section className=\"statistic container\">\r\n      <div className=\"statistic__line\">\r\n        <div className=\"statistic__period\">\r\n          <h2 className=\"statistic__period-title\">Task Activity DIAGRAM</h2>\r\n\r\n          <div className=\"statistic-input-wrap\">\r\n            <input\r\n              className=\"statistic__period-input\"\r\n              type=\"text\"\r\n              placeholder=\"01 Feb - 08 Feb\"\r\n            />\r\n          </div>\r\n\r\n          <p className=\"statistic__period-result\">\r\n            In total for the specified period {filteredTasks.length} tasks were\r\n            fulfilled.\r\n          </p>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"statistic__circle\">\r\n        <div className=\"statistic__colors-wrap\">\r\n          <canvas\r\n            className=\"statistic__colors\"\r\n            width=\"400\"\r\n            height=\"300\"\r\n            ref={circleRef}\r\n          ></canvas>\r\n        </div>\r\n      </div>\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default Statistics;\r\n","import React, { Component } from 'react';\nimport TaskModel from '../model/tasks';\nimport { FILTERS, SORTS, MODES, ERRORS } from '../const';\nimport Menu from './Menu';\nimport Filters from './Filters';\nimport Board from './Board';\nimport Status from './Status';\nimport Statistics from './Statistics';\n\nconst DEFAULT_TASKS_AMOUNT = 8;\nconst LOAD_TASKS_AMOUNT = 8;\nconst UPDATE_TIME = 2500;\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      filter: FILTERS.ALL,\n      sortType: SORTS.DEFAULT,\n      mode: MODES.SHOW,\n      currentTaskAmount: null,\n      error: null,\n      showStats: false,\n    };\n\n    this.liveUpdate = setInterval(() => {\n      this.taskModel.receiveTasksData().then(() => {\n        const tasksAmount = this.taskModel.getTasks({\n          filter: this.state.filter,\n        }).length;\n        const currentTaskAmount =\n          tasksAmount <= 8 ? tasksAmount : this.state.currentTaskAmount;\n        this.setState({ currentTaskAmount });\n      });\n    }, UPDATE_TIME);\n  }\n\n  componentDidMount() {\n    this.taskModel = new TaskModel();\n\n    this.taskModel.receiveTasksData().then(() => {\n      const tasks = this.taskModel.getTasks();\n      if (!tasks) {\n        this.setState({ error: ERRORS.NETWORK });\n        return;\n      }\n\n      const currentTaskAmount = Math.min(\n        this.taskModel.getTasks().length,\n        DEFAULT_TASKS_AMOUNT\n      );\n\n      this.setState({ currentTaskAmount });\n    });\n  }\n\n  handleLoadMoreButtonClick = (evt) => {\n    evt.preventDefault();\n    const tasksAmount = this.taskModel.getTasks({ filter: this.state.filter })\n      .length;\n    const currentTaskAmount = Math.min(\n      tasksAmount,\n      this.state.currentTaskAmount + LOAD_TASKS_AMOUNT\n    );\n\n    this.setState({ currentTaskAmount });\n  };\n\n  handleSortClick = (sort) => {\n    switch (sort) {\n      case SORTS.DEFAULT:\n        this.setState({ sortType: SORTS.DEFAULT });\n        break;\n      case SORTS.DATE_UP:\n        this.setState({ sortType: SORTS.DATE_UP });\n        break;\n      case SORTS.DATE_DOWN:\n        this.setState({ sortType: SORTS.DATE_DOWN });\n        break;\n      default:\n        break;\n    }\n  };\n\n  handleFilterClick = (filter) => {\n    const tasksAmount = this.taskModel.getTasks({ filter }).length;\n    const currentTaskAmount = Math.min(tasksAmount, DEFAULT_TASKS_AMOUNT);\n    this.setState({ filter, currentTaskAmount });\n  };\n\n  handleTaskChange = async (oldTask, newTask) => {\n    if (newTask === null) {\n      await this.taskModel.deleteTask(oldTask);\n    } else if (oldTask === null) {\n      await this.taskModel.addTask(newTask);\n    } else {\n      await this.taskModel.updateTask(oldTask);\n    }\n\n    await this.taskModel.receiveTasksData();\n    const tasksAmount = this.taskModel.getTasks({ filter: this.state.filter })\n      .length;\n    const currentTaskAmount =\n      tasksAmount <= 8 ? tasksAmount : this.state.currentTaskAmount;\n\n    this.setState({ currentTaskAmount });\n  };\n\n  handleAddNewTaskClick = () => {\n    if (this.state.error) {\n      return;\n    }\n\n    const filter = FILTERS.ALL;\n\n    const tasksAmount = this.taskModel.getTasks({ filter }).length;\n    const currentTaskAmount = Math.min(tasksAmount, DEFAULT_TASKS_AMOUNT);\n\n    this.setState({\n      mode: MODES.ADD,\n      sortType: SORTS.DEFAULT,\n      filter,\n      currentTaskAmount,\n      showStats: false,\n    });\n  };\n\n  handleStatisticsClick = () => {\n    this.setState({ showStats: true });\n  };\n\n  handleTasksClick = () => {\n    this.setState({ showStats: false });\n  };\n\n  handleModeChange = (mode) => {\n    this.setState({ mode });\n  };\n\n  renderContent() {\n    if (this.state.showStats && this.taskModel && this.taskModel.getTasks()) {\n      return <Statistics tasks={this.taskModel.getTasks()} />;\n    }\n\n    if (this.taskModel && this.taskModel.getTasks()) {\n      const filteredTasks = this.taskModel.getTasks({\n        filter: this.state.filter,\n        sortType: this.state.sortType,\n      });\n\n      return (\n        <Board\n          tasks={filteredTasks}\n          mode={this.state.mode}\n          currentTaskAmount={this.state.currentTaskAmount}\n          onLoadMoreButtonClick={this.handleLoadMoreButtonClick}\n          onSortClick={this.handleSortClick}\n          onTaskChange={this.handleTaskChange}\n          onModeChange={this.handleModeChange}\n        />\n      );\n    }\n\n    return <Status error={this.state.error} />;\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <section className=\"main__control control container\">\n          <h1 className=\"control__title\">TASKMANAGER</h1>\n          <Menu\n            onAddNewTaskClick={this.handleAddNewTaskClick}\n            onTasksClick={this.handleTasksClick}\n            onStatisticsClick={this.handleStatisticsClick}\n          />\n        </section>\n        <Filters\n          taskModel={this.taskModel}\n          currentFilter={this.state.filter}\n          onFilterClick={this.handleFilterClick}\n          showStats={this.state.showStats}\n        />\n\n        {this.renderContent()}\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './components/App';\r\n\r\nReactDOM.render(<App />, document.querySelector('.main'));\r\n"],"sourceRoot":""}